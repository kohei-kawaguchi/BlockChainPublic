// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_loglikelihood_arrival_rate_rcpp
double compute_loglikelihood_arrival_rate_rcpp(Eigen::VectorXd theta, Eigen::VectorXd winning_rate, Eigen::VectorXd epoch_time, Eigen::VectorXd generated, Eigen::MatrixXd x_variable);
RcppExport SEXP _BlockChainPublic_compute_loglikelihood_arrival_rate_rcpp(SEXP thetaSEXP, SEXP winning_rateSEXP, SEXP epoch_timeSEXP, SEXP generatedSEXP, SEXP x_variableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type winning_rate(winning_rateSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type epoch_time(epoch_timeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type generated(generatedSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x_variable(x_variableSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_loglikelihood_arrival_rate_rcpp(theta, winning_rate, epoch_time, generated, x_variable));
    return rcpp_result_gen;
END_RCPP
}
// compute_score_arrival_rate_rcpp
Eigen::VectorXd compute_score_arrival_rate_rcpp(Eigen::VectorXd theta, Eigen::VectorXd winning_rate, Eigen::VectorXd epoch_time, Eigen::VectorXd generated, Eigen::MatrixXd x_variable);
RcppExport SEXP _BlockChainPublic_compute_score_arrival_rate_rcpp(SEXP thetaSEXP, SEXP winning_rateSEXP, SEXP epoch_timeSEXP, SEXP generatedSEXP, SEXP x_variableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type winning_rate(winning_rateSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type epoch_time(epoch_timeSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type generated(generatedSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x_variable(x_variableSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_score_arrival_rate_rcpp(theta, winning_rate, epoch_time, generated, x_variable));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BlockChainPublic_compute_loglikelihood_arrival_rate_rcpp", (DL_FUNC) &_BlockChainPublic_compute_loglikelihood_arrival_rate_rcpp, 5},
    {"_BlockChainPublic_compute_score_arrival_rate_rcpp", (DL_FUNC) &_BlockChainPublic_compute_score_arrival_rate_rcpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_BlockChainPublic(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
